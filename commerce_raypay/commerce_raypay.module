<?php

/**
 * Implements hook_commerce_payment_method_info().
 *
 * @return array
 */
function commerce_raypay_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['commerce_raypay'] = array(
    'method_id' => 'commerce_raypay',
    'title' => 'درگاه پرداخت رای پی',
    'display_title' => 'رای پی',
    'short_title' => 'رای پی',
    'description' => 'پرداخت امن با درگاه رای پی',
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );
  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_raypay_settings_form($settings = NULL) {

  $form = array();
  $form['user_id'] = array(
    '#type' => 'textfield',
    '#title' => 'شناسه کاربری',
    '#default_value' => isset($settings['user_id']) ? $settings['user_id'] : "",
    '#description' => 'از پنل رای پی دریافت کنید.',
  );
    $form['marketing_id'] = array(
        '#type' => 'textfield',
        '#title' => 'شناسه کسب و کار',
        '#default_value' => isset($settings['marketing_id']) ? $settings['marketing_id'] : "",
        '#description' => 'از پنل رای پی دریافت کنید.',
    );
  $form['sandbox'] = array(
    '#type' => 'checkbox',
    '#title' => 'فعالسازی SandBox',
    '#default_value' => isset($settings['sandbox']) ? $settings['sandbox'] : 1,
    '#description' => 'با انتخاب این گزینه، پرداخت در محیط تست زای پی انجام می شود.',
  );
  return $form;
}

/**
 * Payment method callback: redirect form.
 * See https://raypay.ir/web-service for the gateway documentation.
 *
 * @param $form
 * @param $form_state
 * @param $order
 * @param $payment_method
 * @return mixed
 */
function commerce_raypay_redirect_form($form, &$form_state, $order, $payment_method) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = (int) ($wrapper->commerce_order_total->amount->value());
  $amount_decimal = commerce_currency_amount_to_decimal($amount, $currency_code);

  // Since the gateway accept just Iranian Rilas (IRR), if the order currency is based on
  // Iranian Toman (TMN), we must convert it to IRR.
  // (10 Rials are equal to 1 Toman) .
  // For enabling the TMN on your site, you can clone this sandbox module created by Ahmad Hejazee:
  // https://www.drupal.org/sandbox/hejazee/1861440
  if ($currency_code == 'TMN') {
    $amount_decimal *= 10;
  }

  // The callback url when the user is brought back to the website from the payment gateway.
  // We must sent it to te gateway for the first time before we go to the gateway page.
  $invoice_id             = round(microtime(true) * 1000);
  $callback = url('checkout/'.  $order->order_id .     '/payment/return/' . $order->data['payment_redirect_key'] , ['absolute' => TRUE]);
  $callback .= '?order_id=' . $order->order_id . '&invoice_id=' . $invoice_id;
  $user_id = $payment_method['settings']['user_id'];
  $marketing_id = $payment_method['settings']['marketing_id'];
  $sandbox = ($payment_method['settings']['sandbox'] ? true : false);
  // Gateway endpoint.
  $url = 'https://api.raypay.ir/raypay/api/v1/payment/pay';
  $params = [
        'factorNumber' => strval($order->order_id),
        'amount' => strval($amount_decimal),
        'userID' => $user_id,
        'marketingID' => $marketing_id,
        'invoiceID'    => strval($invoice_id),
        'redirectUrl'  => $callback,
        'desc' => 'پرداخت دروپال 7 با شماره سفارش ' . $order->order_id,
        'enableSandBox' => $sandbox
  ];
  $headers = array(
    'Content-Type' => 'application/json'
  );
  try {
    $response = drupal_http_request($url, array(
      'method' => 'POST',
      'headers' => $headers,
      'data' => json_encode($params),
    ));
    $response = json_decode($response->data);

    if ($response->IsSuccess == true) {
      // According to the gateway documentation, if we get response code 200,
      // we can redirect to the link which is generated by the gateway.
      // Also we can save a new transaction with pending status, so that we can track
      // the transaction later.
      $token =$response->Data;
      $link='https://my.raypay.ir/ipg';
        // Create new transaction but with the pending status.
        $transaction = commerce_payment_transaction_new('commerce_raypay', $order->order_id);
        $transaction->instance_id = $payment_method['instance_id'];
        $transaction->currency_code = $currency_code;
        $transaction->amount = $amount;
        $transaction->remote_id = $invoice_id;
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        $transaction->message = 'در حال اتصال به درگاه پرداخت رای پی';
        commerce_payment_transaction_save($transaction);

        // When everything is ok, we must redirect to the link that is generated by the gateway.
        // Otherwise we will be brought back to the review page.
        $form['#action'] = $link;
        $form['#method'] = 'GET';
        $form['token'] = array('#type' => 'hidden', '#value' => $token);
    }
    else {
      drupal_set_message(t($response->Message), 'error');
      watchdog('commerce_raypay',
        'An error is occurred with error_code: %error_code and error_message: "@error_message" when accessing the payment endpoint: !url.',
        array(
          '%error_code' => $response->StatusCode,
          '@error_message' => $response->Message,
          '!url' => $url,
        ),
        WATCHDOG_ERROR);
      commerce_payment_redirect_pane_previous_page($order);
      drupal_goto('checkout/' . $order->order_id . '/review');
    }

  } catch (\Exception $e) {
    drupal_set_message(t($e->getMessage()), 'error');
    commerce_payment_redirect_pane_previous_page($order);
    drupal_goto('checkout/' . $order->order_id . '/review');
  }

  return $form;
}

/**
 * Payment method callback: redirect form validate.
 * See https://raypay.ir/web-service for the gateway documentation.
 *
 * @param $order
 * @param $payment_method
 * @return bool
 */
function commerce_raypay_redirect_form_validate($order, $payment_method) {
  $order_id = isset($_GET['order_id']) ? $_GET['order_id'] : '';
  $invoice_id = isset($_GET['invoice_id']) ? $_GET['invoice_id'] : '';

  if ($order->order_id != $order_id) {
    // Checks if somebody is trying to abuse the transaction callback.
    drupal_set_messsage(t('Abuse of transaction callback.'), 'error');

    watchdog('commerce_raypay',
      'A wrong order id is posted to the callback endpoint. It is occurred maybe due to abuse of transaction callback : %wrong instead of : %current is posted',
      array(
        '%wrong' => $order_id,
        '%current' => $order->order_id,
      ),
      WATCHDOG_ERROR
    );
    commerce_payment_redirect_pane_previous_page($order);
    return FALSE;
  }

  // Before we verify for a payment at the RayPay endpoint, we must look for an
  // internal transaction.
  if ($transaction = commerce_raypay_load_transaction($invoice_id, $order->order_id)) {
      $url = 'https://api.raypay.ir/raypay/api/v1/payment/verify';

      $headers = array(
        'Content-Type' => 'application/json'
      );

      try {
        $response = drupal_http_request($url, array(
          'method' => 'POST',
          'headers' => $headers,
          'data' => json_encode($_POST),
        ));
        $result = json_decode($response->data);

        if ($result->IsSuccess == true) {
          // In this case the gateway will send a message in json format.
          if ($result->Data->Status == 1) {
            // According to the gateway documentation, when the status is equal to 100,
            // the payment is successful.
            // Therefore we will save the transaction as a successful of one.
            // Otherwise we will save it as a failed transaction.
            commerce_raypay_update_transaction($transaction, $result->Data->InvoiceID, $result->Data->Status, $result->Data->WritheaderID, COMMERCE_PAYMENT_STATUS_SUCCESS);
            commerce_payment_redirect_pane_next_page($order);
            watchdog('commerce_raypay', 'Payment succeeded.');
            return TRUE;
          }
          else {
            commerce_raypay_update_transaction($transaction, $result->Data->InvoiceID, $result->Data->Status, $result->Data->WritheaderID, COMMERCE_PAYMENT_STATUS_FAILURE);
            commerce_payment_redirect_pane_previous_page($order);
            drupal_set_message(t("Payment failed with status code: %code.", array(
              '%code' => $result->Data->Status,
            )), 'error');
            watchdog('commerce_raypay',
              'Payment failed with status code: %code.', array(
                '%code' => $result->Data->Status,
              ),
              WATCHDOG_ERROR
            );
            return FALSE;
          }
        }
        elseif ($response->code >= 400 && $response->code < 500) {
          $error_response = json_decode($response->data);
          drupal_set_message(t($error_response->error_message), 'error');
          watchdog('commerce_raypay',
            'Payment failed. This is due to an error with http code: %http_code, error_code: %error_code and error_message: "@error_message" when accessing the verification endpoint: !url',
            array(
              '%http_code' => $response->code,
              '%error_code' => $error_response->StatusCode,
              '@error_message' => $error_response->Message,
              '!url' => $url,
            ),
            WATCHDOG_ERROR
          );
          commerce_raypay_update_transaction($transaction, $invoice_id, $response->code, $order->order_id, COMMERCE_PAYMENT_STATUS_FAILURE);
          commerce_payment_redirect_pane_previous_page($order);
          return FALSE;
        }
        elseif ($response->code >= 500) {
          drupal_set_messsage(t('Payment failed.'), 'error');
          watchdog('commerce_raypay',
            'Payment failed. This is due to an error with http code: %http_code when accessing the verification endpoint: !url',
            array(
              '%http_code' => $response->code,
              '!url' => $url,
            ),
            WATCHDOG_ERROR
          );
          commerce_raypay_transaction($payment_method, $order, $invoice_id, $order->order_id, $response->code, COMMERCE_PAYMENT_STATUS_FAILURE);
          commerce_payment_redirect_pane_previous_page($order);
        }
      } catch (\Exception $e) {
        drupal_set_message(t($e->getMessage()), 'error');
        commerce_payment_redirect_pane_previous_page($order);
      }
  }
  else {
    commerce_payment_redirect_pane_previous_page($order);
    drupal_set_message("Payment failed.", 'error');
    return FALSE;
  }
  return FALSE;
}

/**
 * Helper function for updating a transaction
 *
 * @param $transaction
 * @param $track_id
 * @param $remote_status
 * @param $card_no
 * @param $status
 */
function commerce_raypay_update_transaction($transaction, $track_id, $remote_status, $writheaderID, $status) {
  $transaction->status = $status;

  if ($status == COMMERCE_PAYMENT_STATUS_SUCCESS) {
    $transaction->message = 'successful (id: @invoice_id, track_id: @track_id, status: @remote_status, writheader_id: @writheader_id)';
  }
  elseif ($status == COMMERCE_PAYMENT_STATUS_FAILURE) {
    $transaction->message = 'failed (id: @invoice_id, track_id: @track_id, status: @remote_status, writheader_id: @writheader_id)';
  }
  $transaction->message_variables = array(
    '@invoice_id' => $transaction->remote_id,
    '@track_id' => $track_id,
    '@remote_status' => $remote_status,
    '@writheader_id' => $writheaderID,
  );
  commerce_payment_transaction_save($transaction);
}

/**
 * Helper function for loading a commerce transaction
 *
 * @param $remote_id
 * @param $order_id
 * @return bool|mixed
 */
function commerce_raypay_load_transaction($invoice_id, $order_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_payment_transaction')
    ->entityCondition('bundle', 'commerce_raypay')
    ->propertyCondition('remote_id', $invoice_id)
    ->propertyCondition('order_id', $order_id)
    ->propertyCondition('status', COMMERCE_PAYMENT_STATUS_PENDING);
  $result = $query->execute();
  $transaction_ids = array_keys($result['commerce_payment_transaction']);
  if (count($transaction_ids) == 1) {
    // If we created a transaction before (in the redirect form),
    // There would be one and just one transaction with the given $remote_id and $order_id.
    // If so, we will return that transaction.
    // If there is not any transaction and also if there are
    // more than a transaction (with very very low probability), we must
    // return false.

    $transaction = commerce_payment_transaction_load($transaction_ids[0]);
    return $transaction;
  }
  else {
    return FALSE;
  }
}
